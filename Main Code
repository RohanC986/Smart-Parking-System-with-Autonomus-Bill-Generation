SOURCECODE:
####################### IMPORTING REQUIRED LIBEREIES###############################
import easyocr
reader = easyocr.Reader(['en'])
import pandas as pd
import requests
import cv2
import imutils
import numpy as np
#pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
import datetime
import smtplib
##############################FOR THE EMAIL UPDATION###########################################
EMAIL_ADDRESS = "" ##senders email id
PASSWORD = "" ## senders password
EMAIL_ADDRESS_1 = "" ## receivers id
def send_email(subject, msg):
 try:
 server = smtplib.SMTP('smtp.gmail.com:587')
 server.ehlo()
 server.starttls()
 server.login(EMAIL_ADDRESS,PASSWORD)
 message = 'Subject: {}\n\n{}'.format(subject, msg)
 server.sendmail(EMAIL_ADDRESS, EMAIL_ADDRESS_1, message)
 server.quit()
 print("Success: Email sent!")
 except:
 print("Email failed to send.")
subject = "LINK OF TODAYS DATA"
msg = "https://docs.google.com/spreadsheets/d/1_9F7ZwexuZi5gPr8DoYbNcLuqobwI_2Q_0kI7TvDBU/edit#gid=889326813"
send_email(subject, msg)
c=0
while c<2:
 import datetime
 send_time = datetime.datetime.now()
 hour=send_time.strftime("%H")
 min=send_time.strftime("%M")
 sec=send_time.strftime("%S")
 print("H=",hour,"M=",min,"s=",sec)
 check_Hour="06"
 check_Min="51"
 check_Sec="00"
 print("enterd in while loop")
 if hour == check_Hour:
 if min==check_Min:
 if sec==check_Sec:
 print("entered in if loop")
 print("sending mail>>>>>>>>>")
 subject = "LINK OF TODAYS DATA"
 msg = "https://docs.google.com/spreadsheets/d/1_9F7ZwexuZi5gPr8DoYbNcLuqobwI_2Q_0kI7TvDBU/edit#gid=889326813"
 send_email(subject, msg)
 break
####################### FUNCTION TO EXTRACT NUMBER PALTE FORM AN IMAGE #############
def main1(img_path):
 global df
 c=0
 img = cv2.imread(img_path,cv2.IMREAD_COLOR)
 img = cv2.resize(img, (300,300) )
 gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
 gray = cv2.bilateralFilter(gray, 13, 15, 15)
 edged = cv2.Canny(gray, 30, 200)
 contours = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
 contours = imutils.grab_contours(contours)
 contours = sorted(contours, key = cv2.contourArea, reverse = True)[:10]
 screenCnt = None
 for c in contours:
 peri = cv2.arcLength(c, True)
 approx = cv2.approxPolyDP(c, 0.018 * peri, True)
 if len(approx) == 4:
 screenCnt = approx
 break
 if screenCnt is None:
 detected = 0
 print ("No contour detected")
 else:
 detected = 1
 if detected == 1:
 cv2.drawContours(img, [screenCnt], -1, (0, 0, 255), 3)
 mask = np.zeros(gray.shape,np.uint8)
 new_image = cv2.drawContours(mask,[screenCnt],0,255,-1,)
 new_image = cv2.bitwise_and(img,img,mask=mask)
 (x, y) = np.where(mask == 255)
 (topx, topy) = (np.min(x), np.min(y))
 (bottomx, bottomy) = (np.max(x), np.max(y))
 Cropped = gray[topx:bottomx+1, topy:bottomy+1]
 #text = pytesseract.image_to_string(Cropped, config='--psm 11')
 #text=pytesseract.image_to_string(Cropped)
 text = reader.readtext(Cropped,detail = 0)
 text =text[0]
 count=0
 # FOR CHECKING IF THE NUMBERPLATE IS ALREADY REGISTERD IN OUR DATA SET OR NOT
 for i in df.loc[: ,"numbeplate"]:
 #print("value of number plate is",i)
 #print ("entered in for loop")
 if i==text:
 count=count+1
 #print("value of count is:-",count)

 #IF THE NUMBERPLATE IS ALREADY REGISTERD IN THE DATA SET UPDATE ITS OUTIME AND TOTAL CHA
RGES
 if count>0:

 # TO GE THE INDEX WHERE THE NUMBERPLATE IS ALREADY EXIST
 index1 = df.index
 condition = df["numbeplate"] == text
 ROW_indices = index1[condition]
 ROW_indices_list = ROW_indices.tolist()
 a=ROW_indices_list
 outime=datetime.datetime.now() # TO GET PC CURRENT TIME AND DATE
 df.at[a, 'Outtime'] =outime
 intime1=df.loc[a,"In-Time"]
 c = outime-intime1
 minutes = c.dt.total_seconds() / 60 # CONVERTING TIMES INTO MINUTES
 df.at[a,'Total Duration']=minutes
 total_charges= int(minutes*1) # CALCULATING TOTAL CHAGRES WHERE HOURLY CHARGES IS 60RS
 df.at[a,'Total Charge']=total_charges

 # TO UPDATE DATA INTO GOOGLE SPREDSHEET
 parameters={"id":"final", "numbeplate":text,'InTime':intime1,'Outtime':outime,'Total Duration':minutes,'Total Charge':total_charges}
 URL = "https://script.google.com/macros/s/AKfycbxS2UMVhQu3jHgWGrz7JbvxepN4NbRWXkO1TSohtpA3YdYXu5xr9sKLGV5PgISx-6r/exec"
 response = requests.get(URL, params=parameters)


 #IF NUMBERPLATE IS NOT FOUND THAT MEANS THAT CAR IS FIRST TIME COME TO PARKING
 # GETING ITS INIME AND NUMBEPLATE UPDATING INTO GOOGLE SHEET AND DATA SET
 else:
 index = df.index
 number_of_rows = len(index)
 b=number_of_rows-1
 intime = datetime.datetime.now()

 # UPDATING DATA INTO THE DATA SET
 df.at[b, 'In-Time'] = intime
 df.at[b, 'Outtime'] = 0
 df.at[b, 'Total Duration'] = 0
 df.at[b, 'Total Charge'] = 0
 df.at[b, 'numbeplate'] = text

 #UPDATING DATA SET INTO GOOGLE SPREADSHEET
 parameters={"id":"Sheet1", "numbeplate":text,'In-Time':intime,'Outtime':0,'Total Duration':0,'Total Charge':0}
 URL = "https://script.google.com/macros/s/AKfycbxS2UMVhQu3jHgWGrz7JbvxepN4NbRWXkO1TSohtpA3YdYXu5xr9sKLGV5PgISx-6r/exec"
 response = requests.get(URL, params=parameters)
 new_row = {'In-Time':0, 'Outtime':0, 'Total Duration':0, 'Total Charge':0 ,'numbeplate':0}
 #append row to the dataframe
 df = df.append(new_row, ignore_index=True)


 print("Detected license plate Number is:",text)
 img = cv2.resize(img,(500,300))
 Cropped = cv2.resize(Cropped,(400,200))
 #cv2.imshow('car',img)
 #cv2.imshow('Cropped',Cropped)
 print (df)
 cv2.waitKey(0)
 cv2.destroyAllWindows()
###################################### CALLING FUCNTION###############################
img_path='/content/drive/MyDrive/test3.jpg'
main1(img_path)
